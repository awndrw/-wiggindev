{"code":"export const on = (element, event, listener) => {\r\n    element.addEventListener(event, listener);\r\n};\r\nexport const off = (element, event, listener) => {\r\n    element.removeEventListener(event, listener);\r\n};\r\nexport const once = (element, event, listener) => {\r\n    const wrappedListener = e => {\r\n        listener(e);\r\n        off(element, event, wrappedListener);\r\n    };\r\n    on(element, event, wrappedListener);\r\n};\r\nexport const trigger = (element, event) => {\r\n    const customEvent = new CustomEvent(event);\r\n    element.dispatchEvent(customEvent);\r\n};\r\n//# sourceMappingURL=element.js.map","references":["/Users/wiggindev/git/@wiggindev/packages/utils/src/events/eventTypes.ts"],"map":"{\"version\":3,\"file\":\"element.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/events/element.ts\"],\"names\":[],\"mappings\":\"AAEA,MAAM,CAAC,MAAM,EAAE,GAAG,CACd,OAAoB,EACpB,KAAQ,EACR,QAA+C,EACjD,EAAE;IACA,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAA4B,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,GAAG,GAAG,CACf,OAAoB,EACpB,KAAQ,EACR,QAA+C,EACjD,EAAE;IACA,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAA4B,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,IAAI,GAAG,CAChB,OAAoB,EACpB,KAAQ,EACR,QAA+C,EACjD,EAAE;IACA,MAAM,eAAe,GAA0C,CAAC,CAAC,EAAE;QAC/D,QAAQ,CAAC,CAAC,CAAC,CAAC;QACZ,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;IACzC,CAAC,CAAC;IACF,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,OAAoB,EAAE,KAAa,EAAE,EAAE;IAC3D,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAC3C,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AACvC,CAAC,CAAC\"}","dts":{"name":"/Users/wiggindev/git/@wiggindev/packages/utils/dist/events/element.d.ts","writeByteOrderMark":false,"text":"import { EventListener, EventName } from './eventTypes';\r\nexport declare const on: <E extends EventName<HTMLElementEventMap>>(element: HTMLElement, event: E, listener: EventListener<HTMLElementEventMap, E>) => void;\r\nexport declare const off: <E extends EventName<HTMLElementEventMap>>(element: HTMLElement, event: E, listener: EventListener<HTMLElementEventMap, E>) => void;\r\nexport declare const once: <E extends EventName<HTMLElementEventMap>>(element: HTMLElement, event: E, listener: EventListener<HTMLElementEventMap, E>) => void;\r\nexport declare const trigger: (element: HTMLElement, event: string) => void;\r\n"}}
